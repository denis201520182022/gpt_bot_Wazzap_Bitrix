# src/app.py
import os
from dotenv import load_dotenv
load_dotenv()
import asyncio
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, Depends
from sqlalchemy.orm import Session

from database import db_service
from database.db import SessionLocal
from services import bitrix_service, wazzup_service, llm_service
from utils import parse_form_data, normalize_phone

# --- –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö –ò–ó .ENV ---
TARGET_FUNNEL_ID = os.getenv("TARGET_FUNNEL_ID")
WELCOME_STAGE_ID = f"C{TARGET_FUNNEL_ID}:NEW"
TOUCH_TODAY_STAGE_ID = os.getenv("TOUCH_TODAY_STAGE_ID")
NEW_LOT_STAGE_ID = os.getenv("NEW_LOT_STAGE_ID")
NOMINALS_STAGE_ID = os.getenv("NOMINALS_STAGE_ID")
TEST_ACTIVITY_STAGE_ID = os.getenv("TEST_ACTIVITY_STAGE_ID")
TEST_FULL_ACTION_STAGE_ID = os.getenv("TEST_FULL_ACTION_STAGE_ID")

# --- –§–û–ù–û–í–´–ô –ü–†–û–¶–ï–°–° (WORKER) ---
async def process_pending_messages_worker():
    print("üöÄ –í–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            db = SessionLocal()
            dialog_batches = db_service.get_and_clear_pending_dialogs(db, delay_seconds=10)
            for batch in dialog_batches:
                dialog = batch['dialog']
                pending = batch['pending']
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(pending)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è chat_id: {dialog.chat_id}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞—á–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                for msg in pending:
                    db_service.add_message_to_history(db, dialog.chat_id, "user", msg['content'])

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                full_history = db_service.get_dialog_history(db, dialog.chat_id)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç LLM
                ai_response = await llm_service.generate_manager_response(full_history, manager_name="–ê–ª–µ–∫—Å–µ–π")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
                if ai_response:
                    success = wazzup_service.send_message(dialog.chat_id, ai_response)
                    if success:
                        db_service.add_message_to_history(db, dialog.chat_id, "assistant", ai_response)
            db.close()
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –í –í–û–†–ö–ï–†–ï: {e}")
        await asyncio.sleep(5)

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    worker_task = asyncio.create_task(process_pending_messages_worker())
    yield

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –°–ù–ê–ß–ê–õ–ê –°–û–ó–î–ê–ï–ú APP, –ü–û–¢–û–ú –ü–ï–†–ï–î–ê–ï–ú LIFESPAN ---
app = FastAPI(title="Bitrix Wazzup Bot", lifespan=lifespan)
# --------------------------------------------------------------------

# --- –ó–ê–í–ò–°–ò–ú–û–°–¢–¨ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ï–°–°–ò–ò –ë–î ---
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/")
def read_root():
    return {"status": "ok", "message": "Bot is running"}

@app.post("/webhook/bitrix")
async def handle_bitrix_webhook(request: Request, db: Session = Depends(get_db)):
    form_data = await request.form()
    data = parse_form_data(form_data)
    
    if data.get("event") != "ONCRMDEALUPDATE":
        return {"status": "ok", "message": "Event ignored"}

    deal_id = int(data.get("data", {}).get("FIELDS", {}).get("ID"))
    if not deal_id: return {"status": "error", "message": "No deal ID"}
    
    deal_details = bitrix_service.get_deal_details(deal_id)
    if not deal_details: return {"status": "error", "message": "Failed to get deal details"}

    current_funnel_id = deal_details.get("CATEGORY_ID")
    current_stage = deal_details.get("STAGE_ID")
    
    if current_funnel_id == TARGET_FUNNEL_ID:
        print(f"–°–¥–µ–ª–∫–∞ {deal_id} –≤ –Ω—É–∂–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–µ. –°—Ç–∞–¥–∏—è: {current_stage}")

        if current_stage == NOMINALS_STAGE_ID:
            print(f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ {deal_id} –Ω–∞ —Å—Ç–∞–¥–∏–∏ '–ù–æ–º–∏–Ω–∞–ª—ã'. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞.")
            return {"status": "ok", "message": "Ignored due to Nominals stage"}

        contact_id = int(deal_details.get("CONTACT_ID"))
        manager_id = int(deal_details.get("ASSIGNED_BY_ID"))
        client_name, manager_name = "–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç", "–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä"
        contact_details = None

        if contact_id:
            contact_details = bitrix_service.get_contact_details(contact_id)
            if contact_details and contact_details.get("NAME"):
                client_name = contact_details.get("NAME")

        if manager_id:
            manager = bitrix_service.get_user_details(manager_id)
            if manager:
                full_name = f"{manager.get('NAME', '')} {manager.get('LAST_NAME', '')}".strip()
                if full_name: manager_name = full_name
        
        message_to_send = None
        scenario_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        # --- –†–û–£–¢–ï–† –°–¶–ï–ù–ê–†–ò–ï–í ---
        if current_stage == WELCOME_STAGE_ID:
            scenario_name = "–ü–†–ò–í–ï–¢–°–¢–í–ò–ï"
            message_to_send = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}! –≠—Ç–æ {manager_name}, –≤–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é...")
        elif current_stage == TOUCH_TODAY_STAGE_ID:
            scenario_name = "–ö–ê–°–ê–ù–ò–ï –°–ï–ì–û–î–ù–Ø"
            message_to_send = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}! –≠—Ç–æ {manager_name}. –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–∞–±–æ—Ç–∞ –ø–æ –≤–∞—à–∏–º —Ç–µ–∫—É—â–∏–º –¥–µ–ª–∞–º? ...")
        elif current_stage == NEW_LOT_STAGE_ID:
            scenario_name = "–ù–û–í–´–ô –õ–û–¢"
            latest_activity = bitrix_service.get_latest_activity_for_deal(deal_id)
            if latest_activity and latest_activity.get("DESCRIPTION"):
                lot_description = latest_activity.get("DESCRIPTION")
                message_to_send = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}! –≠—Ç–æ {manager_name}. –£ –Ω–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ª–æ—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–∏–∫—É: '{lot_description}'. ...")
            else:
                print(f"–û–®–ò–ë–ö–ê –°–¶–ï–ù–ê–†–ò–Ø: –°–¥–µ–ª–∫–∞ {deal_id} –Ω–∞ —Å—Ç–∞–¥–∏–∏ '–ù–æ–≤—ã–π –ª–æ—Ç', –Ω–æ –Ω–µ—Ç –¥–µ–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.")
        elif current_stage == TEST_ACTIVITY_STAGE_ID:
            print(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: –°–¥–µ–ª–∫–∞ {deal_id} –ø–µ—Ä–µ—à–ª–∞ –Ω–∞ —Å—Ç–∞–¥–∏—é '–í –æ–∂–∏–¥–∞–Ω–∏–∏'. –°–æ–∑–¥–∞–µ–º –¥–µ–ª–æ...")
            if manager_id:
                subject = f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç –±–æ—Ç–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ ‚Ññ{deal_id}"
                description = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–µ–ª–æ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏."
                bitrix_service.create_activity_for_deal(deal_id=deal_id, responsible_id=manager_id, subject=subject, description=description)
        elif current_stage == TEST_FULL_ACTION_STAGE_ID:
            scenario_name = "–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢"
            reason_for_escalation = "–ö–ª–∏–µ–Ω—Ç –∑–∞–¥–∞–ª —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö."
            print_formatted_message(scenario_name, deal_id, client_name, manager_name, "–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
            bitrix_service.add_comment_to_deal(deal_id, f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –±–æ—Ç–∞. –¢—Ä–∏–≥–≥–µ—Ä: {scenario_name}.")
            if manager_id:
                bitrix_service.escalate_deal_to_manager(deal_id, manager_id, reason_for_escalation)

        # --- –ï–î–ò–ù–´–ô –ë–õ–û–ö –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î ---
        if message_to_send:
            print_formatted_message(scenario_name, deal_id, client_name, manager_name, message_to_send)
            
            if contact_details and contact_details.get("PHONE"):
                phone_info = contact_details["PHONE"][0]
                raw_phone_number = phone_info.get("VALUE")
                phone_number = normalize_phone(raw_phone_number)
                print(f"–ù–∞–π–¥–µ–Ω –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞: {phone_number}. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏...")
                success = wazzup_service.send_message(phone_number, message_to_send)
                if success:
                    db_service.add_message_to_history(db, phone_number, "assistant", message_to_send)
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: —É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    return {"status": "ok", "message": "Webhook processed"}

# --- –û–ë–õ–ï–ì–ß–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–û–í WAZZUP ---
@app.post("/webhook/wazzup")
async def handle_wazzup_webhook(request: Request, db: Session = Depends(get_db)):
    print(">>> –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Wazzup, –¥–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å...")
    data = await request.json()
    
    if data.get("test") is True: return {"status": "ok"}
    if "messages" not in data or not data["messages"]: return {"status": "ok"}
    
    first_message = data["messages"][0]
    if first_message.get("isEcho") is True: 
        print("   –≠—Ç–æ –Ω–∞—à–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ '—ç—Ö–æ'-—Å–æ–æ–±—â–µ–Ω–∏–µ. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return {"status": "ok", "message": "Echo message ignored"}

    client_text = first_message.get("text")
    raw_client_phone = first_message.get("chatId")
    
    if client_text and raw_client_phone:
        client_phone = normalize_phone(raw_client_phone)
        db_service.add_pending_message(db, client_phone, client_text)
    
    return {"status": "ok"}

def print_formatted_message(scenario: str, deal_id, client_name, manager_name, message: str):
    print("="*50)
    print(f"‚úÖ –°–¶–ï–ù–ê–†–ò–ô '{scenario}' –î–õ–Ø –°–î–ï–õ–ö–ò {deal_id}")
    print(f"  - –ö–ª–∏–µ–Ω—Ç: {client_name}")
    print(f"  - –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}")
    print("\n--- –ì–û–¢–û–í–´–ô –¢–ï–ö–°–¢ –î–õ–Ø WAZZUP ---")
    print(message)
    print("="*50)