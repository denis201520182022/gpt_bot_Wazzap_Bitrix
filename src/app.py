# src/app.py
import os
from dotenv import load_dotenv
load_dotenv()
import asyncio
import json
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, Depends
from sqlalchemy.orm import Session

from database import db_service
from database.db import SessionLocal
from services import bitrix_service, wazzup_service, llm_service, prompt_service
from utils import parse_form_data, normalize_phone

# --- –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö –ò–ó .ENV ---
# ID –≤–æ—Ä–æ–Ω–∫–∏ "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ" (—Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É .env)
TARGET_FUNNEL_ID = os.getenv("TARGET_FUNNEL_ID") 
# –ü–µ—Ä–≤–∞—è —Å—Ç–∞–¥–∏—è –≤ —ç—Ç–æ–π –≤–æ—Ä–æ–Ω–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
WELCOME_STAGE_ID = f"C{TARGET_FUNNEL_ID}:NEW" 

async def process_pending_messages_worker():
    print("üöÄ –í–æ—Ä–∫–µ—Ä-–î–ò–°–ü–ï–¢–ß–ï–† –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            db = SessionLocal()
            # –ó–∞–±–∏—Ä–∞–µ–º –∏–∑ –ë–î –¥–∏–∞–ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
            dialog_batches = db_service.get_and_clear_pending_dialogs(db, delay_seconds=5)
            
            for batch in dialog_batches:
                dialog = batch['dialog']
                pending_messages = batch['pending']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –¥–∏–∞–ª–æ–≥ –≤ "–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–º" —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                if dialog.current_state == 'escalated':
                    print(f"–î–∏–∞–ª–æ–≥ {dialog.chat_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'escalated'. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞.")
                    continue

                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(pending_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è chat_id: {dialog.chat_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '{dialog.current_state}'")

                # --- 1. –ü–û–î–ì–û–¢–û–í–ö–ê –ö–û–ù–¢–ï–ö–°–¢–ê ---
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–π –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                current_history = db_service.get_dialog_history(db, dialog.chat_id)
                for msg in pending_messages:
                    current_history.append({"role": "user", "content": msg['content']})

                # --- 2. –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–®–ï–ù–ò–Ø –û–¢ LLM ---
                prompt_library = prompt_service.get_prompt_library()
                system_prompt = prompt_library.get("#ROLE_AND_STYLE#", "–¢—ã - –≤–µ–∂–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç "–º–æ–∑–≥—É"
                llm_decision = await llm_service.get_bot_decision(current_history, system_prompt)

                if not llm_decision:
                    print(f"‚ùå LLM –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {dialog.chat_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                # --- 3. –†–ê–ó–ë–û–† –ò –ò–°–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î ---
                response_text = llm_decision.get("response_text")
                action = llm_decision.get("action")
                action_params = llm_decision.get("action_params", {})
                new_state = llm_decision.get("new_state", dialog.current_state)

                # –ü–æ–ª—É—á–∞–µ–º ID —Å–¥–µ–ª–∫–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤ –¥–∏–∞–ª–æ–≥–µ
                deal_id = dialog.deal_id
                manager_id = dialog.manager_id

                if not deal_id or not manager_id:
                    print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í –¥–∏–∞–ª–æ–≥–µ {dialog.chat_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç deal_id –∏–ª–∏ manager_id. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å CRM-–¥–µ–π—Å—Ç–≤–∏–µ.")
                    continue

                # --- –®–ê–ì 3.1: –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–£ ---
                if response_text:
                    success = wazzup_service.send_message(dialog.chat_id, response_text)
                    if success:
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                        current_history.append({"role": "assistant", "content": response_text})

                # --- –®–ê–ì 3.2: –í–´–ü–û–õ–ù–ï–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô –í CRM ---
                comment = action_params.get("comment_text")
                task_subject = action_params.get("task_subject")
                task_desc = action_params.get("task_description")

                print(f"  - –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è CRM: {action}")

                if action == "LOG_COMMENT" and comment:
                    bitrix_service.add_comment_to_deal(deal_id, f"[–ß–∞—Ç-–±–æ—Ç]: {comment}")
                
                elif action == "CREATE_TASK_AND_LOG":
                    if comment: bitrix_service.add_comment_to_deal(deal_id, f"[–ß–∞—Ç-–±–æ—Ç]: {comment}")
                    if task_desc and task_subject: 
                        bitrix_service.create_activity_for_deal(deal_id, manager_id, task_subject, task_desc)

                elif action == "ESCALATE_TO_MANAGER":
                    reason = comment or "–ü—Ä–∏—á–∏–Ω–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞."
                    bitrix_service.escalate_deal_to_manager(deal_id, manager_id, reason)

                # --- 4. –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê –í –ë–î ---
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Å—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                db_service.update_dialog(db, dialog.chat_id, new_state, current_history)
                print(f"  - –î–∏–∞–ª–æ–≥ {dialog.chat_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{new_state}'.")
            
            db.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–π –ø–∞—á–∫–∏
        except Exception as e:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º traceback –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
            import traceback
            print(f"‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –í–û–†–ö–ï–†–ï: {e}")
            traceback.print_exc()
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—á–µ—Ä–µ–¥–∏
        await asyncio.sleep(5)

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    worker_task = asyncio.create_task(process_pending_messages_worker())
    yield
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    worker_task.cancel()
    try:
        await worker_task
    except asyncio.CancelledError:
        print("–í–æ—Ä–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

app = FastAPI(title="Bitrix Wazzup Bot", lifespan=lifespan)

# --- –ó–ê–í–ò–°–ò–ú–û–°–¢–¨ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ï–°–°–ò–ò –ë–î ---
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/")
def read_root():
    return {"status": "ok", "message": "Bot is running"}

# --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–û–í BITRIX24 ---
@app.post("/webhook/bitrix")
async def handle_bitrix_webhook(request: Request, db: Session = Depends(get_db)):
    form_data = await request.form()
    data = parse_form_data(form_data)
    
    if data.get("event") != "ONCRMDEALUPDATE":
        return {"status": "ok", "message": "Event ignored"}

    deal_id = int(data.get("data", {}).get("FIELDS", {}).get("ID"))
    if not deal_id: return {"status": "error", "message": "No deal ID"}
    
    deal_details = bitrix_service.get_deal_details(deal_id)
    if not deal_details: return {"status": "error", "message": "Failed to get deal details"}

    current_funnel_id = deal_details.get("CATEGORY_ID")
    current_stage = deal_details.get("STAGE_ID")
    
    # --- 1. –ü–†–û–í–ï–†–ö–ê –¢–†–ò–ì–ì–ï–†–ê: –ù—É–∂–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –∏ –Ω—É–∂–Ω–∞—è —Å—Ç–∞–¥–∏—è ---
    if str(current_funnel_id) == TARGET_FUNNEL_ID and current_stage == WELCOME_STAGE_ID:
        print(f"‚úÖ‚úÖ‚úÖ –¢–†–ò–ì–ì–ï–† –°–†–ê–ë–û–¢–ê–õ: –°–¥–µ–ª–∫–∞ {deal_id} –ø–µ—Ä–µ—à–ª–∞ –Ω–∞ —Å—Ç–∞–¥–∏—é '{WELCOME_STAGE_ID}' –≤ –≤–æ—Ä–æ–Ω–∫–µ '{TARGET_FUNNEL_ID}'. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π...")

        # --- 2. –°–ë–û–† –î–ê–ù–ù–´–• ---
        contact_id = int(deal_details.get("CONTACT_ID"))
        manager_id = int(deal_details.get("ASSIGNED_BY_ID"))
        
        contact_details = bitrix_service.get_contact_details(contact_id)
        if not (contact_details and contact_details.get("PHONE")):
            print(f"‚ö†Ô∏è –û–°–¢–ê–ù–û–í–ö–ê: –£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id} –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id} –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return {"status": "ok", "message": "Contact has no phone number"}
        
        client_name = contact_details.get("NAME", "–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç")
        raw_phone = contact_details["PHONE"][0].get("VALUE")
        client_phone = normalize_phone(raw_phone)

        manager = bitrix_service.get_user_details(manager_id)
        manager_name = f"{manager.get('NAME', '')} {manager.get('LAST_NAME', '')}".strip() if manager else "–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä"
        
        print(f"  - –ö–ª–∏–µ–Ω—Ç: {client_name} ({client_phone})")
        print(f"  - –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name} ({manager_id})")

        # --- 3. –ó–ê–ü–£–°–ö LLM –î–õ–Ø –ò–ù–ò–¶–ò–ê–¶–ò–ò –î–ò–ê–õ–û–ì–ê ---
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è LLM, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –ø–æ–π–º–µ—Ç –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É "–Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"
        initial_instruction = {
            "role": "system",
            "content": f"initiate_dialog. –ò–ú–Ø_–ö–õ–ò–ï–ù–¢–ê: {client_name}. –ò–ú–Ø_–ú–ï–ù–ï–î–ñ–ï–†–ê: {manager_name}."
        }
        
        prompt_library = prompt_service.get_prompt_library()
        system_prompt = prompt_library.get("#ROLE_AND_STYLE#", "–¢—ã - –≤–µ–∂–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç "–º–æ–∑–≥–∞"
        llm_decision = await llm_service.get_bot_decision([initial_instruction], system_prompt)

        if not llm_decision:
            print(f"‚ùå –û–°–¢–ê–ù–û–í–ö–ê: LLM –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ —Å–¥–µ–ª–∫–µ {deal_id}.")
            return {"status": "error", "message": "LLM failed to provide initial decision"}
        
        # --- 4. –ò–°–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î–´ –û–¢ LLM ---
        response_text = llm_decision.get("response_text")
        action = llm_decision.get("action")
        action_params = llm_decision.get("action_params", {})
        new_state = llm_decision.get("new_state")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        if response_text:
            success = wazzup_service.send_message(client_phone, response_text)
            if not success:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}.")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–¥–µ–ª–∫—É –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                bitrix_service.add_comment_to_deal(deal_id, f"–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–æ–º –Ω–∞ –Ω–æ–º–µ—Ä {client_phone}.")
                return {"status": "ok", "message": "Wazzup send failed"}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ CRM
        if action == "LOG_COMMENT" and action_params.get("comment_text"):
            bitrix_service.add_comment_to_deal(deal_id, action_params["comment_text"])

        # --- 5. –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –í –ë–î ---
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –µ–≥–æ –∫ —Å–¥–µ–ª–∫–µ
        dialog = db_service.get_or_create_dialog(db, client_phone, deal_id, manager_id, str(current_funnel_id))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –±–æ—Ç–∞) –∏ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        new_history = []
        if response_text:
            new_history.append({"role": "assistant", "content": response_text})
        
        db_service.update_dialog(db, client_phone, new_state, new_history)

        print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –î–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{new_state}'.")

    return {"status": "ok", "message": "Webhook processed"}


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö WAZZUP (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@app.post("/webhook/wazzup")
async def handle_wazzup_webhook(request: Request, db: Session = Depends(get_db)):
    data = await request.json()
    if data.get("test") is True: return {"status": "ok"}
    if "messages" not in data or not data["messages"]: return {"status": "ok"}
    
    message = data["messages"][0]
    if message.get("isEcho"): return {"status": "ok"}

    text = message.get("text")
    chat_id = message.get("chatId")
    
    if text and chat_id:
        normalized_phone = normalize_phone(chat_id)
        db_service.add_pending_message(db, normalized_phone, text)
        print(f">>> –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {normalized_phone} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.")
    
    return {"status": "ok"}